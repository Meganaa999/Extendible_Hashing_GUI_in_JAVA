/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Hashing;
import java.util.*;
import java.io.*;
/**
 *
 * @author prana
 */
class Directory{
    String data;
    Block b;
    Directory(String data, Block b){
        this.data=data;
        this.b=b;
    }
}
class Block{
    ArrayList<Integer> keys;
    int block;
    Block() {
        this.keys=new ArrayList<>();
    }
    public boolean equals(Block b)
    {
        if(this.block == b.block && this.keys.equals(b.keys))
            return true;
        return false;
    }
}
public class Display extends javax.swing.JFrame {
    static int dir=2;
    static int keys[]=new int[200];
    static int n, index, flag=0,capacity = 2,count = 0;
    static ArrayList<Integer> ikeys = new ArrayList<>();
    static String ip="";
    private PrintStream standardOut;
    /**
     * Creates new form Display
     */
    public Display() {
        initComponents();
         PrintStream printStream = new PrintStream(new CustomOutputStream(optext));
         standardOut = System.out;
         System.setOut(printStream);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        input = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        optext = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        add.setText("ADD");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        search.setText("SEARCH");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        optext.setColumns(20);
        optext.setRows(5);
        jScrollPane1.setViewportView(optext);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(add)
                        .addGap(48, 48, 48)
                        .addComponent(search))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(83, 83, 83)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add)
                            .addComponent(search))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EXTENDIBLE HASHING");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(335, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(318, 318, 318))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        int x = Integer.parseInt(input.getText());
        ArrayList<Directory> d =new ArrayList<>();
        for(int i=0;i<Math.pow(2,dir);i++){
            Block b=new Block();
            String format="%"+dir+"s";
            d.add(new Directory(String.format(format,
                Integer.toBinaryString(i)).replace(" ", "0"), b));
    b.block=dir;
    }
    //ikeys.add(x);
    n=ikeys.size();
    for(int i=0;i<n;i++)
    {
        keys[i]=ikeys.get(i);
        }
        insert(keys,d);
        while(flag==1){
            if(d.get(index).b.block==dir){
                //System.out.println("Directory Doubled"+"\n");
                if(dir >= 4)
                {
                    System.out.println("Key can't be inserted due to overflow");
                    int py = ikeys.size()-1;
                    ikeys.remove(py);
                }
                directory_doubling(d);
                //display(d);
            }
            if(d.get(index).b.block!=dir){
                // System.out.println("Block was splitted"+"\n");
                block_seperation(d);
                //display(d);
            }
        }
        //display(d);
        search_number(x,d);
        flag = 0;
        index = 0;
        count=0;
        
    }//GEN-LAST:event_searchActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        ip = input.getText();
        int x = Integer.parseInt(ip);
        for(int g:ikeys)
        {
            if(x == g)
            {
                System.out.println("Key already present!");
                return;
            }
        }
        ArrayList<Directory> d =new ArrayList<>();
        for(int i=0;i<Math.pow(2,dir);i++){
            Block b=new Block();
            String format="%"+dir+"s";
            d.add(new Directory(String.format(format,
                Integer.toBinaryString(i)).replace(" ", "0"), b));
    b.block=dir;
    }
    ikeys.add(x);
    n=ikeys.size();
    for(int i=0;i<n;i++)
    {
        keys[i]=ikeys.get(i);
        }
        insert(keys,d);
        while(flag==1){
            if(d.get(index).b.block==dir){
                //System.out.println("Directory Doubled"+"\n");
                directory_doubling(d);
                //display(d);
            }
            if(d.get(index).b.block!=dir){
                // System.out.println("Block was splitted"+"\n");
                block_seperation(d);
                //display(d);
            }
        }
        display(d);
        flag = 0;
        index = 0;
        count=0;
    }//GEN-LAST:event_addActionPerformed

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Display().setVisible(true);
            }
        });
    }
    
    static void display(ArrayList<Directory> d){
         System.out.println("GD: "+dir);
        for(int j=0;j<d.size();j++){
            Directory x=d.get(j);
            int p = x.data.length();
            System.out.print("D "+x.data+"-> ");
            System.out.print("B "+x.data.substring(p-x.b.block,p));
            int v = x.b.block;
            while(v != dir)
            {
                System.out.print(" ");
                v++;
            }

            System.out.print(" LD "+x.b.block+" ");
            //System.out.print(": ");
            for(int i=0;i<x.b.keys.size();i++){
                System.out.print(x.b.keys.get(i)+" ");
            }
            
            System.out.println();
        }
        System.out.println();
    }
    
    static void insert(int[] keys, ArrayList<Directory> d){
        flag=0;
        for(int i=0;i<n;i++){
            int h=keys[i]%17;
            String bin=String.format("%4s", 
                    Integer.toBinaryString(h)).replace(" ", "0");
            for(int j=0;j<d.size();j++){
                Directory x=d.get(j);
                if(bin.endsWith(x.data)){
                    if(x.b.keys.size()<capacity)
                        x.b.keys.add(keys[i]);
                    else{
                        i=999;
                        index=j;
                        flag=1;
                        break;
                    }      
                }
            }
        }
    }
    
    static void directory_doubling(ArrayList<Directory> d){
        dir++;String format="%"+dir+"s";
        d.removeAll(d);
        for(int i=0;i<Math.pow(2,dir)/2;i++){
            if(i!=index){
                Block b=new Block();
                d.add(new Directory(String.format(format, 
                        Integer.toBinaryString(i)).replace(" ", "0"), b));
                d.add(new Directory(String.format(format, 
                        Integer.toBinaryString(i+4)).replace(" ", "0"), b));
                b.block=dir-1;
            } 
            else{
                Block b1=new Block();
                d.add(new Directory(String.format(format, 
                        Integer.toBinaryString(i)).replace(" ", "0"), b1));
                b1.block=dir;
                Block b2=new Block();
                d.add(new Directory(String.format(format, 
                        Integer.toBinaryString(i+4)).replace(" ", "0"), b2));
                b2.block=dir;
            }
        }
        insert(keys,d);
    }

    private static void block_seperation(ArrayList<Directory> d) {
        for(int i=0;i<d.size();i++){
            d.get(i).b.keys.clear();
        }
        if(index%2!=0){
            Block b1=new Block();
            d.get(index).b=b1;
            b1.block=dir;
            Block b2=new Block();
            d.get(index-1).b=b2;
            b2.block=dir;
            insert(keys, d);
        }
        else{
            Block b1=new Block();
            d.get(index).b=b1;
            b1.block=dir;
            Block b2=new Block();
            d.get(index+1).b=b2;
            b2.block=dir;
            insert(keys, d);
        }
    }

    static void search_number(int search_value,ArrayList<Directory>d){
    int k= search_value % 17;
    String bin2 = String.format("%4s",Integer.toBinaryString(k)).replace(" ", "0");
    for(int p=0;p<d.size();p++)
        {
            Directory x= d.get(p);
            int w = x.data.length();
            if(bin2.endsWith(x.data))
                {
                    for(int q=0;q<x.b.keys.size();q++)
                        {
                            if(x.b.keys.get(q)== search_value)
                                { 
                                    count++;
                                    System.out.print("The key is present in D ");
                                    System.out.print(x.data + "-> ");
                                    System.out.print("B "+x.data.substring(w-x.b.block,w));
                                    System.out.print(" GD: "+dir+" ");
                                    System.out.print("LD: "+ x.b.block);
                                    System.out.println();
                                    break;
                                }
                     
                        }
                }
            
        }
        
        if(count==0)
         {
            System.out.println("Element not found");
         }
    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea optext;
    private javax.swing.JButton search;
    // End of variables declaration//GEN-END:variables
}
